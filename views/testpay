app.post('/pay', ensureAuthenticated, (req, res) => {

     amount = parseFloat(req.body.amount);


    const create_payment_json = {
        "intent": "sale",
        "payer": {
            "payment_method": "paypal"
        },
        "redirect_urls": {
            "return_url": "http://localhost:3000/payment_success",
            "cancel_url": "http://localhost:3000/login/payment_cancel"
        },
        "transactions": [{
            "item_list": {
                "items": [{
                    "name": "Buy Credits",
                    "sku": "001",
                    "price": amount,
                    "currency": "USD",
                    "quantity": 1
                }]
            },
            "amount": { "total": amount, "currency": "USD" },
            "description": "Adding credits"
        }]
    };
         console.log('Amount ' + typeof amount , amount)

     paypal.payment.create(create_payment_json, (error, payment) => {
        if (error) {
            console.error("Error occurred while creating payment");
            // Handle the error appropriately (e.g., send an error response).
        } else {
            for (let i = 0; i < payment.links.length; i++) {
                if (payment.links[i].rel === 'approval_url') {
                    res.redirect(payment.links[i].href);
                    break;
                }
            }
        }
    });
});

// Payment success route
app.get('/payment_success', async (req, res) => {
    const payerId = req.query.PayerID;
    const paymentId = req.query.paymentId;
    const userId = req.user._id; // Replace with how you identify the user

    // Check if payerId, paymentId, and amount are valid
    if (!payerId || !paymentId || !amount || !userId) {
        console.error("Invalid parameters.");
        return res.redirect('/payment_cancel');
    }

    try {
        // Verify the payment status with the PayPal API
        paypal.payment.get(paymentId, (error, paypalResponse) => {
            if (error) {
                console.error('Error verifying payment:', error);
                return res.redirect('/payment_cancel');
            }

            console.log('PayPal API Response:', paypalResponse);

            // Assuming you have a PayPal API response object called 'paypalResponse'
            const paymentStatus = paypalResponse.state; // 'state' represents the payment status
            console.log('payment Status : ',paymentStatus)
            if (paymentStatus === 'approved') {
                // The payment was successful
                console.log('Payment was successful.');

                // Retrieve the user by their ID
                User.findById(userId, async (userError, user) => {
                    if (userError || !user) {
                        console.error("User not found.");
                        return res.redirect('/payment_error');
                    }

                    // Calculate the updated balance by adding the payment amount to the current balance
                    const updatedBalance = user.balance + amount;
                    console.log('New balance:', updatedBalance);

                    // Update the user's balance in the database
                    await User.findByIdAndUpdate(userId, { balance: updatedBalance });

                    // Format the date and time
                    const currentTimestamp = Date.now();
                    const currentDate = new Date(currentTimestamp);

                    const dateOptions = {
                        year: 'numeric',
                        month: 'long',
                        day: 'numeric',
                    };
                    const formattedDate = currentDate.toLocaleDateString('en-US', dateOptions);

                    const timeOptions = {
                        hour: 'numeric',
                        minute: '2-digit',
                    };
                    const formattedTime = currentDate.toLocaleTimeString('en-US', timeOptions);

                    // Send a confirmation email to the user
                    const userEmail = req.user.username; // Assuming you have the user's email address
                    const subject = 'New payment received from your website';
                    const message = `A new user ${userEmail} has added $${amount} credits`;

                    // Create a transporter object using your email credentials
                    const transporter = nodemailer.createTransport({
                        service: 'gmail',
                        auth: {
                            user: "darkunlocks1@gmail.com",
                     pass:"nnzw lyec ivtj soyw"
                        }
                    });

                    // Create and send the email notification
                    const mailOptions = {
                        from:'darkunlocks1@gmail.com',
                        to: 'strongadas009@gmail.com',
                        subject: subject,
                        text: message,
                    };

                    transporter.sendMail(mailOptions, (emailError, info) => {
                        if (emailError) {
                            console.error('Error sending email notification:', emailError);
                        } else {
                            console.log('Email notification sent:', info.response);
                        }
                    });

                    // Render the success page with the updated balance
                    res.render("success", { amount, paymentId, formattedTime, formattedDate, balance: updatedBalance });
                });
            } else {
                // The payment was not successful
                console.error('Payment was not successful.');
                return res.redirect('/payment_cancel');
            }
        });
    } catch (error) {
        console.error(error);
        return res.redirect('/payment_cancel');
    }
});
